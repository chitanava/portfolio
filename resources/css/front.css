@config "../../tailwind.front.config.js";
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --nf: 280 46.479% 11.137%;
  --n: 280 46.479% 13.922%;
}
*, ::before, ::after {
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
}
::backdrop {
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
}

.drawer {
  display: grid;
  width: 100%;
  overflow: hidden;
  height: 100vh;
  height: 100dvh;
}
.drawer.drawer-end {
  direction: rtl;
}
.drawer.drawer-end > * {
  direction: ltr;
}
.drawer.drawer-end > .drawer-toggle ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 100%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  justify-self: end;
}
.drawer.drawer-end > .drawer-toggle:checked ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 0px;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
:where(.drawer-toggle ~ .drawer-content) {
  height: inherit;
}
.drawer-toggle {
  position: absolute;
  height: 0px;
  width: 0px;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  opacity: 0;
}
.drawer-toggle ~ .drawer-content {
  z-index: 0;
  grid-column-start: 1;
  grid-row-start: 1;
  overflow-y: auto;
  transition-property: all;
  transition-duration: 300ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}
.drawer-toggle ~ .drawer-side {
  grid-column-start: 1;
  grid-row-start: 1;
  display: grid;
  max-height: 100vh;
  overflow-x: hidden;
}
.drawer-toggle ~ .drawer-side > .drawer-overlay {
  visibility: hidden;
  grid-column-start: 1;
  grid-row-start: 1;
  opacity: 0;
  cursor: pointer;
  --tw-bg-opacity: 1;
  background-color: hsl(var(--nf, var(--n)) / var(--tw-bg-opacity));
  transition-property: all;
  transition-duration: 300ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}
.drawer-toggle ~ .drawer-side > .drawer-overlay + * {
  z-index: 10;
  grid-column-start: 1;
  grid-row-start: 1;
  --tw-translate-x: -100%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  transition-property: all;
  transition-duration: 300ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}
.drawer-toggle:checked ~ .drawer-side {
  isolation: isolate;
  overflow-y: auto;
  overflow-x: hidden;
}
.drawer-toggle:checked ~ .drawer-side > .drawer-overlay {
  visibility: visible;
  opacity: 0.999999;
  --tw-bg-opacity: 0.4;
}
.drawer-toggle:checked ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 0px;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
[dir="rtl"] .drawer-toggle ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 100%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
[dir="rtl"] .drawer-toggle:checked ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 0px;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
[dir="rtl"] .drawer.drawer-end > .drawer-toggle ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: -100%;
}
[dir="rtl"] .drawer.drawer-end > .drawer-toggle:checked ~ .drawer-side > .drawer-overlay + * {
  --tw-translate-x: 0px;
}
[dir="rtl"] .drawer.drawer-end > .drawer-toggle:checked ~ .drawer-content {
  --tw-translate-x: 0.5rem;
}
@media (min-width: 1024px) {

  .drawer-mobile {
    grid-auto-columns: max-content auto;
  }

  .drawer-mobile > .drawer-toggle ~ .drawer-content {
    height: auto;
  }

  @media (min-width: 1024px) {

    .drawer-mobile > .drawer-toggle ~ .drawer-content {
      grid-column-start: 2;
    }

    .drawer-mobile > .drawer-toggle ~ .drawer-side > .drawer-overlay {
      visibility: visible;
    }

    .drawer-mobile > .drawer-toggle ~ .drawer-side > .drawer-overlay + * {
      --tw-translate-x: 0px;
      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    }

    .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-content {
      grid-column-start: 1;
    }

    .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-side {
      grid-column-start: 2;
    }

    .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-side > .drawer-overlay {
      visibility: visible;
    }

    .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-side > .drawer-overlay + * {
      --tw-translate-x: 0px;
      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    }
  }

  .drawer-mobile > .drawer-toggle ~ .drawer-side {
    overflow-y: auto;
  }

  .drawer-mobile.drawer-end {
    grid-auto-columns: auto max-content;
    direction: ltr;
  }

  .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-content {
    height: auto;
  }

  .drawer-mobile.drawer-end > .drawer-toggle ~ .drawer-side {
    overflow-y: auto;
  }

  .drawer-mobile > .drawer-toggle:checked ~ .drawer-content {
    --tw-translate-x: 0px;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }
}

body{
  @apply font-poppins;
  @apply text-gray-900;
}

.trix-content .attachment--preview .attachment__caption{
  @apply text-left text-sm text-gray-400 mt-2
}

.trix-content strong{
  @apply font-bold
}

.trix-content a{
  @apply text-indigo-600
}

.trix-content em{
  @apply italic
}

.trix-content h1{
  @apply text-lg font-bold
}

.trix-content del{
  @apply line-through
}

.trix-content ul{
  @apply list-disc list-inside
}

.trix-content ol{
  @apply list-decimal list-inside
}

.trix-content blockquote{
  @apply border-l-4 border-gray-300 pl-4
}

.trix-content .attachment--file{
  @apply inline-block
}

.trix-content .attachment--file .attachment__name{
  @apply text-indigo-600
}

.art-box {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  grid-auto-rows: 250px;
  grid-gap: 4px;
  max-width: 1773px;
}

@media (min-width: 640px) {
  .art-box .art-box_image:nth-child(2n):not(:last-of-type) {
    grid-row-end: span 2;
  }

  .art-box .art-box_image:nth-last-child(-n+6):not(:last-of-type) {
    grid-row-end: span 1;
  }
}

.gallery-description + .image-caption .devider,
.album-description + .image-caption .devider {
  display: none;
}